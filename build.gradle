apply plugin: 'java'

version = "1.3.4"
group = "com.crack"
archivesBaseName = "crackSource"

import java.util.zip.*

repositories {
    mavenCentral()
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    //compileOnly fileTree(dir:'/Applications/ReadyAPI-3.6.0.app/Contents/Resources/app/lib',include:['*.jar'])
    implementation fileTree(dir:'lib',include:['*.jar'])

    compile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    compile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    implementation group: 'org.ow2.asm', name: 'asm', version: '7.1'
    implementation group: 'org.ow2.asm', name: 'asm-util', version: '7.1'
    implementation group: 'org.ow2.asm', name: 'asm-commons', version: '7.1'
}

test {
    useJUnitPlatform()
}
task zipTheFile {
    classToZipFile("Fake.class")
}

task zipTheFilePlanB {
    classToZipFile("FakePlanB.class")
}
task zipTheFilePlanC {
    classToZipFile("FakePlanC.class")
}

task copyToSystem(type: Copy) {
    from 'Protection-5.1.5-crack.jar'
    into '/Applications/ReadyAPI-3.6.0.app/Contents/Resources/app/lib/'
}

task copyOldJar(type: Copy) {
    from 'lib/Protection-5.1.5-old.jar'
    into '/Applications/ReadyAPI-3.6.0.app/Contents/Resources/app/lib/'
}
/**
 * 复制class文件到zip文件中,替换LicenseReader.class
 * 默认路径为:lib/Protection-5.1.5-old.jar
 * 默认文件名:Protection-5.1.5-crack.jar
 */
void classToZipFile(className){
    def zipName = 'lib/Protection-5.1.5-old.jar'
    def fileName = 'com/jp/protection/pub/LicenseReader.class'
    def zipIn = new File(zipName)
    if (!zipIn.exists()) {
        println "原文件不存在"
    }
    def zip = new ZipFile(zipIn)
    def zipTemp = File.createTempFile('Protection-5.1.5', '.jar', new File('./'))
    zipTemp.deleteOnExit()
    def zos = new ZipOutputStream(new FileOutputStream(zipTemp))

    for (zipEntry in zip.entries()) {
        def input = zip.getInputStream(zipEntry)
        if (!zipEntry.name.equalsIgnoreCase(fileName)) {
            zos.putNextEntry(zipEntry)
            zos << input.bytes
        } else {
            zos.putNextEntry(new ZipEntry(fileName))
            def dir = sourceSets.main.output.classesDirs[0].getPath()
            def classFile = new File(className)
            if (classFile.exists()) {
                def newIs = new FileInputStream(classFile)
                zos << newIs.bytes
            }else{
                println "Fake.class文件先由测试代码生成"
            }
        }
        zos.closeEntry()
    }

    zos.close()
    zip.close()
    zipTemp.renameTo("Protection-5.1.5-crack.jar")
}

