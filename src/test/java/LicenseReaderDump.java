import java.util.*;

import org.objectweb.asm.*;

public class LicenseReaderDump implements Opcodes {

    public static byte[] dump() throws Exception {

        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "com/jp/protection/pub/LicenseReader", null, "java/lang/Object", null);

        cw.visitSource("LicenseReader.java", null);

        cw.visitInnerClass("com/jp/protection/pub/LicenseReader$FileStorage", "com/jp/protection/pub/LicenseReader", "FileStorage", ACC_PUBLIC + ACC_STATIC);

        cw.visitInnerClass("com/jp/protection/pub/LicenseReader$InMemoryStorage", "com/jp/protection/pub/LicenseReader", "InMemoryStorage", ACC_PUBLIC + ACC_STATIC);

        cw.visitInnerClass("com/jp/protection/pub/LicenseReader$Storage", "com/jp/protection/pub/LicenseReader", "Storage", ACC_PUBLIC + ACC_STATIC + ACC_ABSTRACT + ACC_INTERFACE);

        {
            fv = cw.visitField(ACC_PRIVATE + ACC_TRANSIENT, "fLicenseReaderListeners", "Ljava/util/Vector;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fLicense", "Lcom/jp/protection/pub/License;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fLicenseFileName", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fUserHomeRelative", "Z", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fLicenseFolder", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fLicenseResourceFolder", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fLicenseRead", "Z", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fVerbose", "Z", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fSkipEncryption", "Z", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fDecryptKeyBytes", "[B", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fSearchLicenseInFile", "Z", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fPerformLicenseBackups", "Z", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fNeedUpdateLicense", "Z", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fSecurityProvider", "Lcom/jp/protection/security/SecurityProvider;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fSecurityAlgorithm", "Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PROTECTED, "fClassForLoadLicenseResource", "Ljava/lang/Class;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PUBLIC + ACC_STATIC + ACC_SYNTHETIC, "z", "I", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC + ACC_SYNTHETIC, "A", "[Ljava/lang/String;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(29, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(33, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            mv.visitInsn(ICONST_2);
            mv.visitInsn(AALOAD);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(34, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fUserHomeRelative", "Z");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(35, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitLdcInsn("");
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(36, l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitLdcInsn("");
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(37, l5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseRead", "Z");
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(39, l6);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fVerbose", "Z");
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(40, l7);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSkipEncryption", "Z");
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(300, l8);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSearchLicenseInFile", "Z");
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(318, l9);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fPerformLicenseBackups", "Z");
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(443, l10);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitTypeInsn(NEW, "com/jp/protection/pub/LicenseReader$FileStorage");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/pub/LicenseReader$FileStorage", "<init>", "(Lcom/jp/protection/pub/LicenseReader;)V", false);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(774, l11);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fNeedUpdateLicense", "Z");
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(840, l12);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            mv.visitInsn(ICONST_3);
            mv.visitInsn(AALOAD);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityAlgorithm", "Ljava/lang/String;");
            mv.visitInsn(RETURN);
            mv.visitMaxs(5, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseResourceFolder", "()Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(52, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setLicenseResourceFolder", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(60, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(61, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getDecryptKeyBytes", "()[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(68, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fDecryptKeyBytes", "[B");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setDecryptKeyBytes", "([B)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(76, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fDecryptKeyBytes", "[B");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(77, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setDecryptKeyBytes", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 4);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(84, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn(",");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(85, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitIntInsn(NEWARRAY, T_BYTE);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fDecryptKeyBytes", "[B");
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(86, l2);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARRAYLENGTH);
            Label l4 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l4);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(87, l5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fDecryptKeyBytes", "[B");
            mv.visitVarInsn(ILOAD, 3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "trim", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Byte", "parseByte", "(Ljava/lang/String;)B", false);
            mv.visitInsn(BASTORE);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(86, l6);
            mv.visitIincInsn(3, 1);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitJumpInsn(IFEQ, l3);
            mv.visitLabel(l4);
            mv.visitLineNumber(89, l4);
            mv.visitInsn(RETURN);
            mv.visitMaxs(5, 5);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "getPrivateKeyBytes", "()[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(97, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getDecryptKeyBytes", "()[B", false);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "setPrivateKeyBytes", "([B)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(106, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "setDecryptKeyBytes", "([B)V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(107, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "setPrivateKeyBytes", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(115, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "setDecryptKeyBytes", "(Ljava/lang/String;)V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(116, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "isLicenseRead", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(124, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseRead", "Z");
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "isSkipEncryption", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(133, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fSkipEncryption", "Z");
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setSkipEncryption", "(Z)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(142, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSkipEncryption", "Z");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(143, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "isVerbose", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(151, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fVerbose", "Z");
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setVerbose", "(Z)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(164, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fVerbose", "Z");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(165, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "error", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(168, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "isVerbose", "()Z", false);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(169, l2);
            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l1);
            mv.visitLineNumber(171, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "error", "(Ljava/lang/Throwable;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(174, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "isVerbose", "()Z", false);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(175, l2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "printStackTrace", "()V", false);
            mv.visitLabel(l1);
            mv.visitLineNumber(177, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(1, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "isUserHomeRelative", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(185, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fUserHomeRelative", "Z");
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setUserHomeRelative", "(Z)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(194, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fUserHomeRelative", "Z");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(195, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseFileName", "()Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(202, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setLicenseFileName", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(210, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(211, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseFolder", "()Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(218, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setLicenseFolder", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(226, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(227, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicense", "()Lcom/jp/protection/pub/License;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(236, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicense", "(Z)Lcom/jp/protection/pub/License;", false);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "getLicense", "(Z)Lcom/jp/protection/pub/License;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(245, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "isLicenseRead", "()Z", false);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            mv.visitVarInsn(ILOAD, 1);
            Label l2 = new Label();
            mv.visitJumpInsn(IFEQ, l2);
            mv.visitLabel(l1);
            mv.visitLineNumber(246, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fNeedUpdateLicense", "Z");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(247, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "readLicense", "()V", false);
            mv.visitLabel(l2);
            mv.visitLineNumber(249, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED + ACC_SYNCHRONIZED, "readLicense", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "com/jp/protection/pub/LicenseOutdatedException");
            Label l3 = new Label();
            Label l4 = new Label();
            mv.visitTryCatchBlock(l3, l4, l2, "com/jp/protection/pub/LicenseOutdatedException");
            Label l5 = new Label();
            Label l6 = new Label();
            Label l7 = new Label();
            mv.visitTryCatchBlock(l5, l6, l7, "java/io/IOException");
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 3);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(253, l8);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseRead", "Z");
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(254, l9);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ACONST_NULL);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            mv.visitLabel(l5);
            mv.visitLineNumber(256, l5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseInputStream", "()Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitLabel(l0);
            mv.visitLineNumber(260, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitJumpInsn(IFNONNULL, l3);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(261, l10);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            Label l11 = new Label();
            mv.visitJumpInsn(IFNULL, l11);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderIssueResolver", "resolveLicenseMissing", "(Lcom/jp/protection/pub/LicenseReader;)Z", true);
            mv.visitJumpInsn(IFEQ, l11);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(262, l12);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseFileInputStream", "()Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 1);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(263, l13);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitJumpInsn(IFEQ, l3);
            mv.visitLabel(l11);
            mv.visitLineNumber(264, l11);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseFileLocation", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseMissing", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            mv.visitLabel(l1);
            mv.visitLineNumber(265, l1);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitJumpInsn(IFEQ, l6);
            mv.visitLabel(l3);
            mv.visitLineNumber(269, l3);
            mv.visitVarInsn(ALOAD, 1);
            Label l14 = new Label();
            mv.visitJumpInsn(IFNULL, l14);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(270, l15);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitTypeInsn(INSTANCEOF, "java/io/FileInputStream");
            Label l16 = new Label();
            mv.visitJumpInsn(IFEQ, l16);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseFileLocation", "()Ljava/lang/String;", false);
            Label l17 = new Label();
            mv.visitJumpInsn(GOTO, l17);
            mv.visitLabel(l16);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseResourceLocation", "()Ljava/lang/String;", false);
            mv.visitLabel(l17);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "readLicense", "(Ljava/io/InputStream;Ljava/lang/String;)V", false);
            mv.visitLabel(l4);
            mv.visitLineNumber(273, l4);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitJumpInsn(IFEQ, l6);
            mv.visitLabel(l14);
            mv.visitLineNumber(277, l14);
            mv.visitJumpInsn(GOTO, l0);
            mv.visitLabel(l2);
            mv.visitLineNumber(275, l2);
            mv.visitVarInsn(ASTORE, 2);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(276, l18);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseFileInputStream", "()Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 1);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(278, l19);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitJumpInsn(IFEQ, l0);
            mv.visitLabel(l6);
            mv.visitLineNumber(281, l6);
            Label l20 = new Label();
            mv.visitJumpInsn(GOTO, l20);
            mv.visitLabel(l7);
            mv.visitLineNumber(279, l7);
            mv.visitVarInsn(ASTORE, 1);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLineNumber(280, l21);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "error", "(Ljava/lang/Throwable;)V", false);
            mv.visitLabel(l20);
            mv.visitLineNumber(282, l20);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 4);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "isSearchLicenseInFile", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(289, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fSearchLicenseInFile", "Z");
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setSearchLicenseInFile", "(Z)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(297, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSearchLicenseInFile", "Z");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(298, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseInputStream", "()Ljava/io/InputStream;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(307, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "getLicenseInputStream", "()Ljava/io/InputStream;", true);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseOutputStream", "()Ljava/io/OutputStream;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(315, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "getLicenseOutputStream", "()Ljava/io/OutputStream;", true);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "isPerformLicenseBackups", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(327, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fPerformLicenseBackups", "Z");
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setPerformLicenseBackups", "(Z)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(337, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fPerformLicenseBackups", "Z");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(338, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "backupLicense", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(347, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "isSupportsLicenseBackup", "()Z", true);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "backupLicense", "()Z", true);
            Label l2 = new Label();
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l1);
            mv.visitInsn(ICONST_0);
            mv.visitLabel(l2);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "canRestoreLicenseFromBackup", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(357, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "isSupportsLicenseBackup", "()Z", true);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "canRestoreLicenseFromBackup", "()Z", true);
            Label l2 = new Label();
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l1);
            mv.visitInsn(ICONST_0);
            mv.visitLabel(l2);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "restoreLicenseFromBackup", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(367, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "isSupportsLicenseBackup", "()Z", true);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "restoreLicenseFromBackup", "()Z", true);
            Label l2 = new Label();
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l1);
            mv.visitInsn(ICONST_0);
            mv.visitLabel(l2);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getBackupLicenseInputStream", "()Ljava/io/InputStream;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(376, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "isSupportsLicenseBackup", "()Z", true);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "getBackupLicenseInputStream", "()Ljava/io/InputStream;", true);
            Label l2 = new Label();
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l1);
            mv.visitInsn(ACONST_NULL);
            mv.visitLabel(l2);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "updateLicense", "(Ljava/io/InputStream;)Z", null, new String[]{"java/io/IOException"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(388, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "isPerformLicenseBackups", "()Z", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "updateLicense", "(Ljava/io/InputStream;Z)Z", false);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(3, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "updateLicense", "(Ljava/io/InputStream;Z)Z", null, new String[]{"java/io/IOException"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, null);
            Label l3 = new Label();
            mv.visitTryCatchBlock(l2, l3, l2, null);
            Label l4 = new Label();
            Label l5 = new Label();
            mv.visitTryCatchBlock(l0, l4, l5, "java/lang/Exception");
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(402, l6);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 3);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(403, l7);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 4);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(405, l8);
            mv.visitVarInsn(ILOAD, 2);
            Label l9 = new Label();
            mv.visitJumpInsn(IFEQ, l9);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "backupLicense", "()Z", false);
            Label l10 = new Label();
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l9);
            mv.visitInsn(ICONST_0);
            mv.visitLabel(l10);
            mv.visitVarInsn(ISTORE, 5);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(407, l11);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseOutputStream", "()Ljava/io/OutputStream;", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(408, l12);
            mv.visitVarInsn(ALOAD, 6);
            Label l13 = new Label();
            mv.visitJumpInsn(IFNULL, l13);
            mv.visitLabel(l0);
            mv.visitLineNumber(411, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKESTATIC, "dev/util/StreamUtil", "copy", "(Ljava/io/InputStream;Ljava/io/OutputStream;)V", false);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(412, l14);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ISTORE, 3);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(413, l15);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitLdcInsn("");
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseUpdated", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            mv.visitLabel(l1);
            mv.visitLineNumber(415, l1);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "close", "()V", false);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(416, l16);
            mv.visitJumpInsn(GOTO, l4);
            mv.visitLabel(l2);
            mv.visitLineNumber(415, l2);
            mv.visitVarInsn(ASTORE, 7);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/OutputStream", "close", "()V", false);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(416, l17);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l4);
            mv.visitLineNumber(420, l4);
            mv.visitJumpInsn(GOTO, l13);
            mv.visitLabel(l5);
            mv.visitLineNumber(417, l5);
            mv.visitVarInsn(ASTORE, 7);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(418, l18);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "error", "(Ljava/lang/Throwable;)V", false);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(419, l19);
            mv.visitTypeInsn(NEW, "java/io/IOException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/IOException", "<init>", "(Ljava/lang/Throwable;)V", false);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitLabel(l13);
            mv.visitLineNumber(423, l13);
            mv.visitVarInsn(ILOAD, 3);
            Label l20 = new Label();
            mv.visitJumpInsn(IFNE, l20);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitJumpInsn(IFEQ, l20);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLineNumber(424, l21);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "restoreLicenseFromBackup", "()Z", false);
            mv.visitInsn(POP);
            mv.visitLabel(l20);
            mv.visitLineNumber(427, l20);
            mv.visitVarInsn(ALOAD, 4);
            Label l22 = new Label();
            mv.visitJumpInsn(IFNULL, l22);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLineNumber(428, l23);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l22);
            mv.visitLineNumber(431, l22);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(3, 8);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "checkLicenseFile", "()V", null, new String[]{"java/lang/IllegalStateException"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(435, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNONNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(436, l2);
            mv.visitTypeInsn(NEW, "java/lang/IllegalStateException");
            mv.visitInsn(DUP);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            mv.visitInsn(ICONST_0);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitLineNumber(438, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            Label l3 = new Label();
            mv.visitJumpInsn(IFNONNULL, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            mv.visitJumpInsn(IFNONNULL, l3);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(439, l4);
            mv.visitTypeInsn(NEW, "java/lang/IllegalStateException");
            mv.visitInsn(DUP);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            mv.visitInsn(ICONST_1);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l3);
            mv.visitLineNumber(441, l3);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getStorage", "()Lcom/jp/protection/pub/LicenseReader$Storage;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(446, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setStorage", "(Lcom/jp/protection/pub/LicenseReader$Storage;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(450, l0);
            mv.visitVarInsn(ALOAD, 1);
            Label l1 = new Label();
            mv.visitJumpInsn(IFNONNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(451, l2);
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            mv.visitInsn(ICONST_4);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitLineNumber(453, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(454, l3);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "readLicense", "(Ljava/io/InputStream;Ljava/lang/String;)V", null, new String[]{"java/io/IOException"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, null);
            Label l3 = new Label();
            mv.visitTryCatchBlock(l2, l3, l2, null);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 5);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(740, l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseRead", "Z");
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(741, l5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ACONST_NULL);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(742, l6);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitLabel(l0);
            mv.visitLineNumber(745, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "smartGetLicenseBytes", "(Ljava/io/InputStream;)[B", false);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitLabel(l1);
            mv.visitLineNumber(747, l1);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(748, l7);
            Label l8 = new Label();
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l2);
            mv.visitLineNumber(747, l2);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(748, l9);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l8);
            mv.visitLineNumber(750, l8);
            mv.visitVarInsn(ALOAD, 3);
            Label l10 = new Label();
            mv.visitJumpInsn(IFNONNULL, l10);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(751, l11);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(752, l12);
            mv.visitVarInsn(ILOAD, 5);
            Label l13 = new Label();
            mv.visitJumpInsn(IFEQ, l13);
            mv.visitLabel(l10);
            mv.visitLineNumber(753, l10);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "smartDecodeLicense", "([B)[B", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(754, l14);
            mv.visitVarInsn(ALOAD, 3);
            Label l15 = new Label();
            mv.visitJumpInsn(IFNONNULL, l15);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(755, l16);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(756, l17);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitJumpInsn(IFEQ, l13);
            mv.visitLabel(l15);
            mv.visitLineNumber(757, l15);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "smartReadLicense", "([B)V", false);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(758, l18);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            Label l19 = new Label();
            mv.visitJumpInsn(IFNULL, l19);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(759, l20);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseImpl");
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseImpl", "setLicenseLocation", "(Ljava/lang/String;)V", false);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLineNumber(760, l21);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseAvailable", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            Label l22 = new Label();
            mv.visitLabel(l22);
            mv.visitLineNumber(762, l22);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fNeedUpdateLicense", "Z");
            mv.visitJumpInsn(IFEQ, l13);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLineNumber(763, l23);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fNeedUpdateLicense", "Z");
            Label l24 = new Label();
            mv.visitLabel(l24);
            mv.visitLineNumber(764, l24);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "updateLicense", "()V", false);
            Label l25 = new Label();
            mv.visitLabel(l25);
            mv.visitLineNumber(765, l25);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitJumpInsn(IFEQ, l13);
            mv.visitLabel(l19);
            mv.visitLineNumber(768, l19);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            mv.visitLabel(l13);
            mv.visitLineNumber(772, l13);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 6);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "updateLicense", "()V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(777, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitTypeInsn(INSTANCEOF, "com/jp/protection/pub/LicenseReaderIssueResolverExt");
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(778, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseReaderIssueResolverExt");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderIssueResolverExt", "updateLicense", "(Lcom/jp/protection/pub/LicenseReader;)Z", true);
            mv.visitJumpInsn(IFEQ, l1);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(779, l3);
            mv.visitTypeInsn(NEW, "com/jp/protection/pub/LicenseOutdatedException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/pub/LicenseOutdatedException", "<init>", "()V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitLineNumber(782, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "smartDecodeLicense", "([B)[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(785, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "decodeLicense", "([B)[B", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(787, l1);
            mv.visitVarInsn(ALOAD, 2);
            Label l2 = new Label();
            mv.visitJumpInsn(IFNONNULL, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitJumpInsn(IFNULL, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderIssueResolver", "resolveLicenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;)Z", true);
            mv.visitJumpInsn(IFEQ, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(789, l3);
            mv.visitTypeInsn(NEW, "com/jp/protection/pub/LicenseOutdatedException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/pub/LicenseOutdatedException", "<init>", "()V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l2);
            mv.visitLineNumber(792, l2);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "decodeLicense", "([B)[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(796, l3);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ASTORE, 2);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(797, l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "isSkipEncryption", "()Z", false);
            Label l5 = new Label();
            mv.visitJumpInsn(IFNE, l5);
            mv.visitLabel(l0);
            mv.visitLineNumber(799, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getSecurityProvider", "()Lcom/jp/protection/security/SecurityProvider;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(800, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fDecryptKeyBytes", "[B");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/security/SecurityProvider", "getPublicKey", "([B)Ljava/security/PublicKey;", true);
            mv.visitVarInsn(ASTORE, 4);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(801, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/security/SecurityProvider", "decode", "([BLjava/security/PublicKey;)[B", true);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l1);
            mv.visitLineNumber(805, l1);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l2);
            mv.visitLineNumber(802, l2);
            mv.visitVarInsn(ASTORE, 3);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(803, l8);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(804, l9);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "error", "(Ljava/lang/Throwable;)V", false);
            mv.visitLabel(l5);
            mv.visitLineNumber(807, l5);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(3, 5);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getSecurityAlgorithm", "()Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(815, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityAlgorithm", "Ljava/lang/String;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setSecurityAlgorithm", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(823, l0);
            mv.visitVarInsn(ALOAD, 1);
            Label l1 = new Label();
            mv.visitJumpInsn(IFNONNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(824, l2);
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            mv.visitIntInsn(BIPUSH, 6);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitLineNumber(827, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityAlgorithm", "Ljava/lang/String;");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(828, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ACONST_NULL);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityProvider", "Lcom/jp/protection/security/SecurityProvider;");
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(829, l4);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "getSecurityProvider", "()Lcom/jp/protection/security/SecurityProvider;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(832, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityProvider", "Lcom/jp/protection/security/SecurityProvider;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNONNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(833, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityAlgorithm", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKESTATIC, "com/jp/protection/security/SecurityProviderFactory", "getSecurityProvider", "(Ljava/lang/String;)Lcom/jp/protection/security/SecurityProvider;", false);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityProvider", "Lcom/jp/protection/security/SecurityProvider;");
            mv.visitLabel(l1);
            mv.visitLineNumber(835, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fSecurityProvider", "Lcom/jp/protection/security/SecurityProvider;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "smartReadLicense", "([B)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(843, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "readLicense", "([B)V", false);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(845, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            Label l2 = new Label();
            mv.visitJumpInsn(IFNONNULL, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitJumpInsn(IFNULL, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderIssueResolver", "resolveLicenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;)Z", true);
            mv.visitJumpInsn(IFEQ, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(847, l3);
            mv.visitTypeInsn(NEW, "com/jp/protection/pub/LicenseOutdatedException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/pub/LicenseOutdatedException", "<init>", "()V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l2);
            mv.visitLineNumber(849, l2);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "readLicense", "([B)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, null);
            Label l3 = new Label();
            mv.visitTryCatchBlock(l2, l3, l2, null);
            Label l4 = new Label();
            Label l5 = new Label();
            Label l6 = new Label();
            mv.visitTryCatchBlock(l4, l5, l6, "java/lang/Exception");
            mv.visitLabel(l4);
            mv.visitLineNumber(18, l4);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayInputStream", "<init>", "([B)V", false);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l0);
            mv.visitLineNumber(20, l0);
            mv.visitTypeInsn(NEW, "java/util/Properties");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/Properties", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(21, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Properties", "load", "(Ljava/io/InputStream;)V", false);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(22, l8);
            mv.visitTypeInsn(NEW, "com/jp/protection/pub/LicenseImpl");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/pub/LicenseImpl", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(23, l9);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseImpl", "getLicenseExpireDate", "()Ljava/util/Date;", false);
            mv.visitIntInsn(SIPUSH, 2114);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Date", "setYear", "(I)V", false);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(24, l10);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "com/jp/protection/utils/LicenseUtils", "load", "(Lcom/jp/protection/pub/License;Ljava/util/Properties;)V", false);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(25, l11);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            mv.visitLabel(l1);
            mv.visitLineNumber(27, l1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayInputStream", "close", "()V", false);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(28, l12);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l2);
            mv.visitLineNumber(27, l2);
            mv.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/jp/protection/pub/LicenseReader", "[B", "java/io/ByteArrayInputStream"}, 1, new Object[]{"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 5);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayInputStream", "close", "()V", false);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(28, l13);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l5);
            mv.visitLineNumber(32, l5);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            Label l14 = new Label();
            mv.visitJumpInsn(GOTO, l14);
            mv.visitLabel(l6);
            mv.visitLineNumber(29, l6);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 2);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(30, l15);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ACONST_NULL);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicense", "Lcom/jp/protection/pub/License;");
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(31, l16);
            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "getCause", "()Ljava/lang/Throwable;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l14);
            mv.visitLineNumber(33, l14);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(RETURN);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLocalVariable("properties", "Ljava/util/Properties;", null, l7, l1, 3);
            mv.visitLocalVariable("license", "Lcom/jp/protection/pub/LicenseImpl;", null, l9, l1, 4);
            mv.visitLocalVariable("byteArrayInputStream", "Ljava/io/ByteArrayInputStream;", null, l0, l5, 2);
            mv.visitLocalVariable("ex", "Ljava/lang/Exception;", null, l15, l14, 2);
            mv.visitLocalVariable("this", "Lcom/jp/protection/pub/LicenseReader;", null, l4, l17, 0);
            mv.visitLocalVariable("array", "[B", null, l4, l17, 1);
            mv.visitMaxs(3, 6);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseProduct", "(Ljava/io/InputStream;)Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(874, l3);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l0);
            mv.visitLineNumber(877, l0);
            mv.visitTypeInsn(NEW, "java/io/DataInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/DataInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(878, l4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/DataInputStream", "readUTF", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l1);
            mv.visitLineNumber(881, l1);
            Label l5 = new Label();
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l2);
            mv.visitLineNumber(879, l2);
            mv.visitVarInsn(ASTORE, 3);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(880, l6);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "error", "(Ljava/lang/Throwable;)V", false);
            mv.visitLabel(l5);
            mv.visitLineNumber(883, l5);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(3, 4);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "smartGetLicenseBytes", "(Ljava/io/InputStream;)[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(887, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseBytes", "(Ljava/io/InputStream;)[B", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(889, l1);
            mv.visitVarInsn(ALOAD, 2);
            Label l2 = new Label();
            mv.visitJumpInsn(IFNONNULL, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitJumpInsn(IFNULL, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderIssueResolver", "resolveLicenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;)Z", true);
            mv.visitJumpInsn(IFEQ, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(892, l3);
            mv.visitTypeInsn(NEW, "com/jp/protection/pub/LicenseOutdatedException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/pub/LicenseOutdatedException", "<init>", "()V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l2);
            mv.visitLineNumber(895, l2);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "getLicenseBytes", "(Ljava/io/InputStream;)[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(899, l3);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(900, l4);
            mv.visitTypeInsn(NEW, "java/io/DataInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/DataInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitLabel(l0);
            mv.visitLineNumber(904, l0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/DataInputStream", "readUTF", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(905, l5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseAboutToRead", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(908, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/DataInputStream", "readLong", "()J", false);
            mv.visitVarInsn(LSTORE, 5);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(911, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/DataInputStream", "available", "()I", false);
            mv.visitVarInsn(ISTORE, 7);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(912, l8);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitIntInsn(NEWARRAY, T_BYTE);
            mv.visitVarInsn(ASTORE, 2);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(913, l9);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 8);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(917, l10);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/DataInputStream", "read", "([BII)I", false);
            mv.visitVarInsn(ISTORE, 9);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(918, l11);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ISTORE, 8);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(919, l12);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitInsn(ISUB);
            mv.visitVarInsn(ISTORE, 7);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(920, l13);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitInsn(ICONST_M1);
            Label l14 = new Label();
            mv.visitJumpInsn(IF_ICMPEQ, l14);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitJumpInsn(IFGT, l10);
            mv.visitLabel(l14);
            mv.visitLineNumber(923, l14);
            mv.visitTypeInsn(NEW, "com/jp/protection/utils/CustomCRC32");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/utils/CustomCRC32", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 10);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(924, l15);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/utils/CustomCRC32", "proceed", "([B)V", false);
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(926, l16);
            mv.visitVarInsn(LLOAD, 5);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/utils/CustomCRC32", "getCRC", "()J", false);
            mv.visitInsn(LCMP);
            mv.visitJumpInsn(IFEQ, l1);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitTypeInsn(INSTANCEOF, "java/io/FileInputStream");
            mv.visitJumpInsn(IFEQ, l1);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(927, l17);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l1);
            mv.visitLineNumber(932, l1);
            Label l18 = new Label();
            mv.visitJumpInsn(GOTO, l18);
            mv.visitLabel(l2);
            mv.visitLineNumber(929, l2);
            mv.visitVarInsn(ASTORE, 4);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitLineNumber(930, l19);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "error", "(Ljava/lang/Throwable;)V", false);
            Label l20 = new Label();
            mv.visitLabel(l20);
            mv.visitLineNumber(931, l20);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l18);
            mv.visitLineNumber(934, l18);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(4, 11);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseFileLocation", "()Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(942, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseFile", "()Ljava/io/File;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "toString", "()Ljava/lang/String;", false);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseResourceLocation", "()Ljava/lang/String;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(950, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            mv.visitVarInsn(ASTORE, 1);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(952, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKESTATIC, "dev/util/StringUtils", "noValue", "(Ljava/lang/String;)Z", false);
            Label l2 = new Label();
            mv.visitJumpInsn(IFNE, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(953, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "endsWith", "(Ljava/lang/String;)Z", false);
            Label l4 = new Label();
            mv.visitJumpInsn(IFEQ, l4);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            Label l5 = new Label();
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l4);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseResourceFolder", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("/");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitLabel(l5);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitLabel(l2);
            mv.visitLineNumber(957, l2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseFileInputStream", "()Ljava/io/InputStream;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/io/FileNotFoundException");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(965, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "checkLicenseFile", "()V", false);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(967, l4);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 1);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(969, l5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            Label l6 = new Label();
            mv.visitJumpInsn(IFNULL, l6);
            mv.visitLabel(l0);
            mv.visitLineNumber(971, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseFile", "()Ljava/io/File;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(972, l7);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "canRead", "()Z", false);
            mv.visitJumpInsn(IFEQ, l1);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(973, l8);
            mv.visitTypeInsn(NEW, "java/io/FileInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileInputStream", "<init>", "(Ljava/io/File;)V", false);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitLabel(l1);
            mv.visitLineNumber(977, l1);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l2);
            mv.visitLineNumber(975, l2);
            mv.visitVarInsn(ASTORE, 2);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(976, l9);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "error", "(Ljava/lang/Throwable;)V", false);
            mv.visitLabel(l6);
            mv.visitLineNumber(980, l6);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(3, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseResourceInputStream", "()Ljava/io/InputStream;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(988, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fClassForLoadLicenseResource", "Ljava/lang/Class;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fClassForLoadLicenseResource", "Ljava/lang/Class;");
            Label l2 = new Label();
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l1);
            mv.visitLdcInsn(Type.getType("Lcom/jp/protection/pub/LicenseReader;"));
            mv.visitLabel(l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseResourceLocation", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", false);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getClassForLoadLicenseResource", "()Ljava/lang/Class;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(997, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fClassForLoadLicenseResource", "Ljava/lang/Class;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setClassForLoadLicenseResource", "(Ljava/lang/Class;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1006, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fClassForLoadLicenseResource", "Ljava/lang/Class;");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(1007, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "getUserHome", "()Ljava/io/File;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1012, l0);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 0);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(1023, l1);
            mv.visitVarInsn(ALOAD, 0);
            Label l2 = new Label();
            mv.visitJumpInsn(IFNONNULL, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1024, l3);
            mv.visitTypeInsn(NEW, "java/io/File");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperties", "()Ljava/util/Properties;", false);
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            mv.visitInsn(ICONST_5);
            mv.visitInsn(AALOAD);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Properties", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 0);
            mv.visitLabel(l2);
            mv.visitLineNumber(1027, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(5, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseFile", "()Ljava/io/File;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1037, l0);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 1);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(1039, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "isUserHomeRelative", "()Z", false);
            Label l2 = new Label();
            mv.visitJumpInsn(IFEQ, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1040, l3);
            mv.visitTypeInsn(NEW, "java/io/File");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/io/File");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESTATIC, "com/jp/protection/pub/LicenseReader", "getUserHome", "()Ljava/io/File;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
            mv.visitVarInsn(ASTORE, 1);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1041, l4);
            Label l5 = new Label();
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l2);
            mv.visitLineNumber(1042, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKESTATIC, "dev/util/StringUtils", "noValue", "(Ljava/lang/String;)Z", false);
            Label l6 = new Label();
            mv.visitJumpInsn(IFNE, l6);
            mv.visitTypeInsn(NEW, "java/io/File");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFolder", "Ljava/lang/String;");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;Ljava/lang/String;)V", false);
            Label l7 = new Label();
            mv.visitJumpInsn(GOTO, l7);
            mv.visitLabel(l6);
            mv.visitTypeInsn(NEW, "java/io/File");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseFileName", "Ljava/lang/String;");
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l7);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitLabel(l5);
            mv.visitLineNumber(1045, l5);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(6, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "addLicenseReaderListener", "(Lcom/jp/protection/pub/LicenseReaderListener;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1053, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNONNULL, l1);
            mv.visitTypeInsn(NEW, "java/util/Vector");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/Vector", "<init>", "(I)V", false);
            Label l2 = new Label();
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "clone", "()Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/util/Vector");
            mv.visitLabel(l2);
            mv.visitVarInsn(ASTORE, 2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1054, l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "contains", "(Ljava/lang/Object;)Z", false);
            Label l4 = new Label();
            mv.visitJumpInsn(IFNE, l4);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(1055, l5);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "addElement", "(Ljava/lang/Object;)V", false);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1056, l6);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitLabel(l4);
            mv.visitLineNumber(1058, l4);
            mv.visitInsn(RETURN);
            mv.visitMaxs(3, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "removeLicenseReaderListener", "(Lcom/jp/protection/pub/LicenseReaderListener;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1065, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "contains", "(Ljava/lang/Object;)Z", false);
            mv.visitJumpInsn(IFEQ, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(1066, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "clone", "()Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/util/Vector");
            mv.visitVarInsn(ASTORE, 2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1067, l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "removeElement", "(Ljava/lang/Object;)Z", false);
            mv.visitInsn(POP);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1068, l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitLabel(l1);
            mv.visitLineNumber(1070, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "fireLicenseMissing", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 6);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1073, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(1074, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1075, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I", false);
            mv.visitVarInsn(ISTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1076, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitJumpInsn(IF_ICMPGE, l1);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1077, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseReaderListener");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderListener", "licenseMissing", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", true);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(1076, l7);
            mv.visitIincInsn(5, 1);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitLabel(l1);
            mv.visitLineNumber(1080, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "fireLicenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 6);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1083, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(1084, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1085, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I", false);
            mv.visitVarInsn(ISTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1086, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitJumpInsn(IF_ICMPGE, l1);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1087, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseReaderListener");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderListener", "licenseCorrupted", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", true);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(1086, l7);
            mv.visitIincInsn(5, 1);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitLabel(l1);
            mv.visitLineNumber(1090, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "fireLicenseAvailable", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 6);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1093, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(1094, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1095, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I", false);
            mv.visitVarInsn(ISTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1096, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitJumpInsn(IF_ICMPGE, l1);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1097, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseReaderListener");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderListener", "licenseAvailable", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", true);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(1096, l7);
            mv.visitIincInsn(5, 1);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitLabel(l1);
            mv.visitLineNumber(1100, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "fireLicenseAboutToRead", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 6);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1103, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(1104, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1105, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I", false);
            mv.visitVarInsn(ISTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1106, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitJumpInsn(IF_ICMPGE, l1);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1107, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseReaderListener");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderListener", "licenseAboutToRead", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", true);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(1106, l7);
            mv.visitIincInsn(5, 1);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitLabel(l1);
            mv.visitLineNumber(1110, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getIssueResolver", "()Lcom/jp/protection/pub/LicenseReaderIssueResolver;", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1117, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            mv.visitInsn(ARETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "setIssueResolver", "(Lcom/jp/protection/pub/LicenseReaderIssueResolver;)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1125, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderIssueResolver", "Lcom/jp/protection/pub/LicenseReaderIssueResolver;");
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(1126, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getLicenseBytes", "()[B", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, null);
            Label l3 = new Label();
            mv.visitTryCatchBlock(l2, l3, l2, null);
            Label l4 = new Label();
            Label l5 = new Label();
            Label l6 = new Label();
            mv.visitTryCatchBlock(l4, l5, l6, "java/lang/Exception");
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(1133, l7);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 1);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(1135, l8);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "getLicenseInputStream", "()Ljava/io/InputStream;", false);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l4);
            mv.visitLineNumber(1138, l4);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayOutputStream");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayOutputStream", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitLabel(l0);
            mv.visitLineNumber(1140, l0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "dev/util/StreamUtil", "copy", "(Ljava/io/InputStream;Ljava/io/OutputStream;)V", false);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(1141, l9);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "close", "()V", false);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(1142, l10);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "toByteArray", "()[B", false);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitLabel(l1);
            mv.visitLineNumber(1144, l1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(1145, l11);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l2);
            mv.visitLineNumber(1144, l2);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(1145, l12);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l5);
            mv.visitLineNumber(1148, l5);
            Label l13 = new Label();
            mv.visitJumpInsn(GOTO, l13);
            mv.visitLabel(l6);
            mv.visitLineNumber(1146, l6);
            mv.visitVarInsn(ASTORE, 3);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(1147, l14);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "error", "(Ljava/lang/Throwable;)V", false);
            mv.visitLabel(l13);
            mv.visitLineNumber(1150, l13);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 5);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "fireLicenseRemoved", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 6);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1154, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(1155, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1156, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I", false);
            mv.visitVarInsn(ISTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1157, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitJumpInsn(IF_ICMPGE, l1);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1158, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(INSTANCEOF, "com/jp/protection/pub/LicenseReaderListenerExt");
            Label l7 = new Label();
            mv.visitJumpInsn(IFEQ, l7);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(1159, l8);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseReaderListenerExt");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderListenerExt", "licenseRemoved", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", true);
            mv.visitLabel(l7);
            mv.visitLineNumber(1157, l7);
            mv.visitIincInsn(5, 1);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitLabel(l1);
            mv.visitLineNumber(1162, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PROTECTED, "fireLicenseUpdated", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitFieldInsn(GETSTATIC, "com/jp/protection/pub/LicenseReader", "z", "I");
            mv.visitVarInsn(ISTORE, 6);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1165, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitLineNumber(1166, l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fLicenseReaderListeners", "Ljava/util/Vector;");
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1167, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I", false);
            mv.visitVarInsn(ISTORE, 4);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1168, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 5);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitJumpInsn(IF_ICMPGE, l1);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1169, l6);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(INSTANCEOF, "com/jp/protection/pub/LicenseReaderListenerExt");
            Label l7 = new Label();
            mv.visitJumpInsn(IFEQ, l7);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(1170, l8);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "com/jp/protection/pub/LicenseReaderListenerExt");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReaderListenerExt", "licenseUpdated", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", true);
            mv.visitLabel(l7);
            mv.visitLineNumber(1168, l7);
            mv.visitIincInsn(5, 1);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitLabel(l1);
            mv.visitLineNumber(1173, l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "removeLicense", "()Z", null, null);
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(1183, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/jp/protection/pub/LicenseReader", "fStorage", "Lcom/jp/protection/pub/LicenseReader$Storage;");
            mv.visitMethodInsn(INVOKEINTERFACE, "com/jp/protection/pub/LicenseReader$Storage", "removeLicense", "()Z", true);
            mv.visitVarInsn(ISTORE, 1);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLineNumber(1184, l1);
            mv.visitVarInsn(ILOAD, 1);
            Label l2 = new Label();
            mv.visitJumpInsn(IFEQ, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(1185, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitLdcInsn("");
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "fireLicenseRemoved", "(Lcom/jp/protection/pub/LicenseReader;Ljava/lang/String;)V", false);
            mv.visitLabel(l2);
            mv.visitLineNumber(1187, l2);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(3, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "updateLicense", "([B)Z", null, new String[]{"java/io/IOException"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, null);
            Label l3 = new Label();
            mv.visitTryCatchBlock(l2, l3, l2, null);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(1200, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 2);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(1201, l5);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayInputStream", "<init>", "([B)V", false);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitLabel(l0);
            mv.visitLineNumber(1203, l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseReader", "updateLicense", "(Ljava/io/InputStream;)Z", false);
            mv.visitVarInsn(ISTORE, 2);
            mv.visitLabel(l1);
            mv.visitLineNumber(1205, l1);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayInputStream", "close", "()V", false);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(1206, l6);
            Label l7 = new Label();
            mv.visitJumpInsn(GOTO, l7);
            mv.visitLabel(l2);
            mv.visitLineNumber(1205, l2);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayInputStream", "close", "()V", false);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(1206, l8);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l7);
            mv.visitLineNumber(1208, l7);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(3, 5);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
            mv.visitCode();
            mv.visitIntInsn(BIPUSH, 7);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn("5\u0003v@O\n\u000f5CH\u0015\u000f5K@\u0014\u000f5LRY\u0004zQ\u0001\n\u001apFH\u001f\u0003pA");
            Label l0 = new Label();
            mv.visitJumpInsn(JSR, l0);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitLdcInsn("5\u0003v@O\n\u000f5IN\u001a\u000baLN\u0017J|V\u0001\u0017\u0005a\u0005R\u0009\u000fvLG\u0010\u000fq");
            mv.visitJumpInsn(JSR, l0);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitLdcInsn("\u0015\u0003v@O\n\u000f;ND\u0000");
            mv.visitJumpInsn(JSR, l0);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_3);
            mv.visitLdcInsn("+9T");
            mv.visitJumpInsn(JSR, l0);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_4);
            mv.visitLdcInsn("*\u001ezW@\u001e\u000f5HT\n\u001e{\u0002UY\u0008p\u0005O\u000c\u0006y");
            mv.visitJumpInsn(JSR, l0);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_5);
            mv.visitLdcInsn("\u000c\u0019pW\u000f\u0011\u0005x@");
            mv.visitJumpInsn(JSR, l0);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitIntInsn(BIPUSH, 6);
            mv.visitLdcInsn("*\u000fvPS\u0010\u001el\u0005@\u0015\rzWH\r\u0002x\u0005R\u0011\u0005`IEY\u0008p\u0005R\u0009\u000fvLG\u0010\u000fq");
            mv.visitJumpInsn(JSR, l0);
            mv.visitInsn(AASTORE);
            mv.visitFieldInsn(PUTSTATIC, "com/jp/protection/pub/LicenseReader", "A", "[Ljava/lang/String;");
            Label l1 = new Label();
            mv.visitJumpInsn(GOTO, l1);
            mv.visitLabel(l0);
            mv.visitVarInsn(ASTORE, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toCharArray", "()[C", false);
            mv.visitInsn(DUP);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitInsn(SWAP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 1);
            mv.visitInsn(SWAP);
            mv.visitInsn(DUP_X1);
            mv.visitInsn(ICONST_1);
            Label l2 = new Label();
            mv.visitJumpInsn(IF_ICMPGT, l2);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 1);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitInsn(DUP2);
            mv.visitInsn(CALOAD);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitInsn(ICONST_5);
            mv.visitInsn(IREM);
            Label l5 = new Label();
            Label l6 = new Label();
            Label l7 = new Label();
            Label l8 = new Label();
            Label l9 = new Label();
            mv.visitTableSwitchInsn(0, 3, l9, new Label[]{l5, l6, l7, l8});
            mv.visitLabel(l5);
            mv.visitIntInsn(BIPUSH, 121);
            Label l10 = new Label();
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l6);
            mv.visitIntInsn(BIPUSH, 106);
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l7);
            mv.visitIntInsn(BIPUSH, 21);
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l8);
            mv.visitIntInsn(BIPUSH, 37);
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l9);
            mv.visitIntInsn(BIPUSH, 33);
            mv.visitLabel(l10);
            mv.visitInsn(IXOR);
            mv.visitInsn(I2C);
            mv.visitInsn(CASTORE);
            mv.visitIincInsn(1, 1);
            mv.visitInsn(SWAP);
            mv.visitInsn(DUP_X1);
            mv.visitJumpInsn(IFNE, l2);
            mv.visitInsn(DUP2);
            mv.visitInsn(SWAP);
            mv.visitJumpInsn(GOTO, l4);
            mv.visitLabel(l2);
            mv.visitInsn(SWAP);
            mv.visitInsn(DUP_X1);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitJumpInsn(IF_ICMPGT, l3);
            mv.visitTypeInsn(NEW, "java/lang/String");
            mv.visitInsn(DUP_X1);
            mv.visitInsn(SWAP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([C)V", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "intern", "()Ljava/lang/String;", false);
            mv.visitInsn(SWAP);
            mv.visitInsn(POP);
            mv.visitVarInsn(RET, 0);
            mv.visitLabel(l1);
            mv.visitInsn(RETURN);
            mv.visitMaxs(11, 2);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }
}
