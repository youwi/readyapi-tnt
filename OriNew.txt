 {
            mv = cw.visitMethod(ACC_PROTECTED, "readLicense", "([B)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, null);
            Label l3 = new Label();
            mv.visitTryCatchBlock(l2, l3, l2, null);
            Label l4 = new Label();
            Label l5 = new Label();
            Label l6 = new Label();
            mv.visitTryCatchBlock(l4, l5, l6, "java/lang/Exception");
            mv.visitLabel(l4);
            mv.visitLineNumber(18, l4);
            mv.visitTypeInsn(NEW, "java/io/ByteArrayInputStream");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayInputStream", "<init>", "([B)V", false);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l0);
            mv.visitLineNumber(20, l0);
            mv.visitTypeInsn(NEW, "java/util/Properties");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/Properties", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(21, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Properties", "load", "(Ljava/io/InputStream;)V", false);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(22, l8);
            mv.visitTypeInsn(NEW, "com/jp/protection/pub/LicenseImpl");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/jp/protection/pub/LicenseImpl", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 4);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(23, l9);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/jp/protection/pub/LicenseImpl", "getLicenseExpireDate", "()Ljava/util/Date;", false);
            mv.visitIntInsn(SIPUSH, 2114);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Date", "setYear", "(I)V", false);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(24, l10);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "com/jp/protection/utils/LicenseUtils", "load", "(Lcom/jp/protection/pub/License;Ljava/util/Properties;)V", false);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(25, l11);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/com.jp.protection.pub.MethodReadLicense", "fLicense", "Lcom/jp/protection/pub/License;");
            mv.visitLabel(l1);
            mv.visitLineNumber(27, l1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayInputStream", "close", "()V", false);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(28, l12);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l2);
            mv.visitLineNumber(27, l2);
            mv.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/jp/protection/pub/com.jp.protection.pub.MethodReadLicense", "[B", "java/io/ByteArrayInputStream"}, 1, new Object[]{"java/lang/Throwable"});
            mv.visitVarInsn(ASTORE, 5);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayInputStream", "close", "()V", false);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(28, l13);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l5);
            mv.visitLineNumber(32, l5);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            Label l14 = new Label();
            mv.visitJumpInsn(GOTO, l14);
            mv.visitLabel(l6);
            mv.visitLineNumber(29, l6);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 2);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(30, l15);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ACONST_NULL);
            mv.visitFieldInsn(PUTFIELD, "com/jp/protection/pub/com.jp.protection.pub.MethodReadLicense", "fLicense", "Lcom/jp/protection/pub/License;");
            Label l16 = new Label();
            mv.visitLabel(l16);
            mv.visitLineNumber(31, l16);
            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "getCause", "()Ljava/lang/Throwable;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l14);
            mv.visitLineNumber(33, l14);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(RETURN);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLocalVariable("properties", "Ljava/util/Properties;", null, l7, l1, 3);
            mv.visitLocalVariable("license", "Lcom/jp/protection/pub/LicenseImpl;", null, l9, l1, 4);
            mv.visitLocalVariable("byteArrayInputStream", "Ljava/io/ByteArrayInputStream;", null, l0, l5, 2);
            mv.visitLocalVariable("ex", "Ljava/lang/Exception;", null, l15, l14, 2);
            mv.visitLocalVariable("this", "Lcom/jp/protection/pub/com.jp.protection.pub.MethodReadLicense;", null, l4, l17, 0);
            mv.visitLocalVariable("array", "[B", null, l4, l17, 1);
            mv.visitMaxs(3, 6);
            mv.visitEnd();
        }